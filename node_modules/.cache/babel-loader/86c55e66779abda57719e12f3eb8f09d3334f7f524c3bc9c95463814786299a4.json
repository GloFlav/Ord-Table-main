{"ast":null,"code":"import { CriticalPath } from \"../model/data.model\";\nimport { maximum_achievment_date, responsible_task, minimum_start_date, check_every_not_null_early, check_every_not_null_late } from \"./utils\";\nexport const compute_final_achievment_date = linkedTask => {\n  if (linkedTask.start_tasks.some(t => t.early_date !== null)) return;\n  linkedTask.start_tasks.forEach(start_task => {\n    start_task.early_date = 0;\n    if (start_task.next_tasks.length > 0) start_task.next_tasks.forEach(next_task => compute_early_date_until_null(next_task, linkedTask));else linkedTask.add_end_task(start_task);\n  });\n  return maximum_achievment_date(linkedTask.end_tasks);\n};\nconst compute_early_date_until_null = (current_task, linkedTask) => {\n  if (check_every_not_null_early(current_task.previous_tasks)) {\n    current_task.early_date = maximum_achievment_date(current_task.previous_tasks);\n    if (!current_task.next_tasks) return;else if (current_task.next_tasks.length === 0) {\n      linkedTask.add_end_task(current_task);\n      return;\n    }\n    current_task.next_tasks.forEach(task => compute_early_date_until_null(task, linkedTask));\n  }\n};\nexport const find_critical_path = (final_achievment_date, linkedTask) => {\n  const critical_path = new CriticalPath();\n  let current_critical_path_task = responsible_task(linkedTask.end_tasks, final_achievment_date);\n  critical_path.add_new_link(current_critical_path_task);\n  while (current_critical_path_task.previous_tasks) {\n    current_critical_path_task = responsible_task(current_critical_path_task.previous_tasks, current_critical_path_task.early_date);\n    critical_path.add_new_link(current_critical_path_task);\n  }\n  return critical_path.add_new_link({\n    id: \"Déb\"\n  });\n};\nexport const compute_late_date = (final_achievment_date, linkedTask) => {\n  linkedTask.end_tasks.forEach(end_task => {\n    end_task.late_date = final_achievment_date - end_task.duration;\n    end_task.margin = end_task.late_date - end_task.early_date;\n    if (end_task.previous_tasks) end_task.previous_tasks.forEach(previous_task => compute_late_date_until_null(previous_task));\n  });\n};\nconst compute_late_date_until_null = current_task => {\n  if (check_every_not_null_late(current_task.next_tasks)) {\n    current_task.late_date = minimum_start_date(current_task.next_tasks) - current_task.duration;\n    current_task.margin = current_task.late_date - current_task.early_date;\n    if (current_task.previous_tasks) current_task.previous_tasks.forEach(task => compute_late_date_until_null(task));\n  }\n};","map":{"version":3,"names":["CriticalPath","maximum_achievment_date","responsible_task","minimum_start_date","check_every_not_null_early","check_every_not_null_late","compute_final_achievment_date","linkedTask","start_tasks","some","t","early_date","forEach","start_task","next_tasks","length","next_task","compute_early_date_until_null","add_end_task","end_tasks","current_task","previous_tasks","task","find_critical_path","final_achievment_date","critical_path","current_critical_path_task","add_new_link","id","compute_late_date","end_task","late_date","duration","margin","previous_task","compute_late_date_until_null"],"sources":["C:/Users/RASGF/OneDrive/Bureau/Ord-Table-main/src/utils/algorithm/table.js"],"sourcesContent":["import { CriticalPath } from \"../model/data.model\";\nimport {\n    maximum_achievment_date,\n    responsible_task,\n    minimum_start_date,\n    check_every_not_null_early,\n    check_every_not_null_late,\n} from \"./utils\";\n\nexport const compute_final_achievment_date = (linkedTask) => {\n    if (linkedTask.start_tasks.some((t) => t.early_date !== null)) return;\n    linkedTask.start_tasks.forEach((start_task) => {\n        start_task.early_date = 0;\n        if (start_task.next_tasks.length > 0)\n            start_task.next_tasks.forEach((next_task) =>\n                compute_early_date_until_null(next_task, linkedTask)\n            );\n        else linkedTask.add_end_task(start_task);\n    });\n    return maximum_achievment_date(linkedTask.end_tasks);\n};\n\nconst compute_early_date_until_null = (current_task, linkedTask) => {\n    if (check_every_not_null_early(current_task.previous_tasks)) {\n        current_task.early_date = maximum_achievment_date(\n            current_task.previous_tasks\n        );\n        if (!current_task.next_tasks) return;\n        else if (current_task.next_tasks.length === 0) {\n            linkedTask.add_end_task(current_task);\n            return;\n        }\n        current_task.next_tasks.forEach((task) =>\n            compute_early_date_until_null(task, linkedTask)\n        );\n    }\n};\n\nexport const find_critical_path = (final_achievment_date, linkedTask) => {\n    const critical_path = new CriticalPath();\n    let current_critical_path_task = responsible_task(\n        linkedTask.end_tasks,\n        final_achievment_date\n    );\n    critical_path.add_new_link(current_critical_path_task);\n    while (current_critical_path_task.previous_tasks) {\n        current_critical_path_task = responsible_task(\n            current_critical_path_task.previous_tasks,\n            current_critical_path_task.early_date\n        );\n        critical_path.add_new_link(current_critical_path_task);\n    }\n    return critical_path.add_new_link({ id: \"Déb\" });\n};\n\nexport const compute_late_date = (final_achievment_date, linkedTask) => {\n    linkedTask.end_tasks.forEach((end_task) => {\n        end_task.late_date = final_achievment_date - end_task.duration;\n        end_task.margin = end_task.late_date - end_task.early_date;\n        if (end_task.previous_tasks)\n            end_task.previous_tasks.forEach((previous_task) =>\n                compute_late_date_until_null(previous_task)\n            );\n    });\n};\n\nconst compute_late_date_until_null = (current_task) => {\n    if (check_every_not_null_late(current_task.next_tasks)) {\n        current_task.late_date =\n            minimum_start_date(current_task.next_tasks) - current_task.duration;\n        current_task.margin = current_task.late_date - current_task.early_date;\n        if (current_task.previous_tasks)\n            current_task.previous_tasks.forEach((task) =>\n                compute_late_date_until_null(task)\n            );\n    }\n};\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,qBAAqB;AAClD,SACIC,uBAAuB,EACvBC,gBAAgB,EAChBC,kBAAkB,EAClBC,0BAA0B,EAC1BC,yBAAyB,QACtB,SAAS;AAEhB,OAAO,MAAMC,6BAA6B,GAAIC,UAAU,IAAK;EACzD,IAAIA,UAAU,CAACC,WAAW,CAACC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,UAAU,KAAK,IAAI,CAAC,EAAE;EAC/DJ,UAAU,CAACC,WAAW,CAACI,OAAO,CAAEC,UAAU,IAAK;IAC3CA,UAAU,CAACF,UAAU,GAAG,CAAC;IACzB,IAAIE,UAAU,CAACC,UAAU,CAACC,MAAM,GAAG,CAAC,EAChCF,UAAU,CAACC,UAAU,CAACF,OAAO,CAAEI,SAAS,IACpCC,6BAA6B,CAACD,SAAS,EAAET,UAAU,CACvD,CAAC,CAAC,KACDA,UAAU,CAACW,YAAY,CAACL,UAAU,CAAC;EAC5C,CAAC,CAAC;EACF,OAAOZ,uBAAuB,CAACM,UAAU,CAACY,SAAS,CAAC;AACxD,CAAC;AAED,MAAMF,6BAA6B,GAAGA,CAACG,YAAY,EAAEb,UAAU,KAAK;EAChE,IAAIH,0BAA0B,CAACgB,YAAY,CAACC,cAAc,CAAC,EAAE;IACzDD,YAAY,CAACT,UAAU,GAAGV,uBAAuB,CAC7CmB,YAAY,CAACC,cACjB,CAAC;IACD,IAAI,CAACD,YAAY,CAACN,UAAU,EAAE,OAAO,KAChC,IAAIM,YAAY,CAACN,UAAU,CAACC,MAAM,KAAK,CAAC,EAAE;MAC3CR,UAAU,CAACW,YAAY,CAACE,YAAY,CAAC;MACrC;IACJ;IACAA,YAAY,CAACN,UAAU,CAACF,OAAO,CAAEU,IAAI,IACjCL,6BAA6B,CAACK,IAAI,EAAEf,UAAU,CAClD,CAAC;EACL;AACJ,CAAC;AAED,OAAO,MAAMgB,kBAAkB,GAAGA,CAACC,qBAAqB,EAAEjB,UAAU,KAAK;EACrE,MAAMkB,aAAa,GAAG,IAAIzB,YAAY,CAAC,CAAC;EACxC,IAAI0B,0BAA0B,GAAGxB,gBAAgB,CAC7CK,UAAU,CAACY,SAAS,EACpBK,qBACJ,CAAC;EACDC,aAAa,CAACE,YAAY,CAACD,0BAA0B,CAAC;EACtD,OAAOA,0BAA0B,CAACL,cAAc,EAAE;IAC9CK,0BAA0B,GAAGxB,gBAAgB,CACzCwB,0BAA0B,CAACL,cAAc,EACzCK,0BAA0B,CAACf,UAC/B,CAAC;IACDc,aAAa,CAACE,YAAY,CAACD,0BAA0B,CAAC;EAC1D;EACA,OAAOD,aAAa,CAACE,YAAY,CAAC;IAAEC,EAAE,EAAE;EAAM,CAAC,CAAC;AACpD,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAGA,CAACL,qBAAqB,EAAEjB,UAAU,KAAK;EACpEA,UAAU,CAACY,SAAS,CAACP,OAAO,CAAEkB,QAAQ,IAAK;IACvCA,QAAQ,CAACC,SAAS,GAAGP,qBAAqB,GAAGM,QAAQ,CAACE,QAAQ;IAC9DF,QAAQ,CAACG,MAAM,GAAGH,QAAQ,CAACC,SAAS,GAAGD,QAAQ,CAACnB,UAAU;IAC1D,IAAImB,QAAQ,CAACT,cAAc,EACvBS,QAAQ,CAACT,cAAc,CAACT,OAAO,CAAEsB,aAAa,IAC1CC,4BAA4B,CAACD,aAAa,CAC9C,CAAC;EACT,CAAC,CAAC;AACN,CAAC;AAED,MAAMC,4BAA4B,GAAIf,YAAY,IAAK;EACnD,IAAIf,yBAAyB,CAACe,YAAY,CAACN,UAAU,CAAC,EAAE;IACpDM,YAAY,CAACW,SAAS,GAClB5B,kBAAkB,CAACiB,YAAY,CAACN,UAAU,CAAC,GAAGM,YAAY,CAACY,QAAQ;IACvEZ,YAAY,CAACa,MAAM,GAAGb,YAAY,CAACW,SAAS,GAAGX,YAAY,CAACT,UAAU;IACtE,IAAIS,YAAY,CAACC,cAAc,EAC3BD,YAAY,CAACC,cAAc,CAACT,OAAO,CAAEU,IAAI,IACrCa,4BAA4B,CAACb,IAAI,CACrC,CAAC;EACT;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}